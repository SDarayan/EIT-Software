using System;
using System.Collections.Generic;
using System.Text;
using EngMATLib;
using System.Drawing;
using System.Drawing.Imaging;

namespace EIT
{
    public unsafe class UnsafeBitmap
    {
        Bitmap bitmap;

        // three elements used for MakeGreyUnsafe
        int width;
        BitmapData bitmapData = null;
        Byte* pBase = null;

        public UnsafeBitmap(Bitmap bitmap)
        {
            this.bitmap = new Bitmap(bitmap);
        }

        public UnsafeBitmap(int width, int height)
        {
            this.bitmap = new Bitmap(width, height, PixelFormat.Format24bppRgb);
        }

        public void Dispose()
        {
            bitmap.Dispose();
        }

        public Bitmap Bitmap
        {
            get
            {
                return (bitmap);
            }
        }

        private Point PixelSize
        {
            get
            {
                GraphicsUnit unit = GraphicsUnit.Pixel;
                RectangleF bounds = bitmap.GetBounds(ref unit);

                return new Point((int)bounds.Width, (int)bounds.Height);
            }
        }

        public void LockBitmap()
        {
            GraphicsUnit unit = GraphicsUnit.Pixel;
            RectangleF boundsF = bitmap.GetBounds(ref unit);
            Rectangle bounds = new Rectangle((int)boundsF.X,
       (int)boundsF.Y,
       (int)boundsF.Width,
       (int)boundsF.Height);

            // Figure out the number of bytes in a row
            // This is rounded up to be a multiple of 4
            // bytes, since a scan line in an image must always be a multiple of 4 bytes
            // in length. 
            width = (int)boundsF.Width * sizeof(PixelData);
            if (width % 4 != 0)
            {
                width = 4 * (width / 4 + 1);
            }
            bitmapData =
       bitmap.LockBits(bounds, ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb);

            pBase = (Byte*)bitmapData.Scan0.ToPointer();
        }

        public PixelData GetPixel(int x, int y)
        {
            PixelData returnValue = *PixelAt(x, y);
            return returnValue;
        }

        public void SetPixel(int x, int y, PixelData colour)
        {
            PixelData* pixel = PixelAt(x, y);
            *pixel = colour;
        }
        public void SetSquare(int x, int y, byte r, byte g, byte b)
        {
            PixelData colour = new PixelData();
            colour.red = r;
            colour.green = g;
            colour.blue = b;
            PixelData* pixel = null;
            for (int xx = 0; xx < 8; xx++)
            {
                for (int yy = 0; yy < 8; yy++)
                {
                    pixel = PixelAt(x+xx, y+yy);
                    *pixel = colour;
                }
            }
        }
        public void SetPixel(int x, int y, byte r, byte g, byte b)
        {
            PixelData colour = new PixelData();
            colour.red = r;
            colour.green = g;
            colour.blue = b;
            PixelData* pixel = PixelAt(x, y);
            *pixel = colour;
        }

        public void UnlockBitmap()
        {
            bitmap.UnlockBits(bitmapData);
            bitmapData = null;
            pBase = null;
        }
        public PixelData* PixelAt(int x, int y)
        {
            return (PixelData*)(pBase + y * width + x * sizeof(PixelData));
        }
    }
    public struct PixelData
    {
        public byte blue;
        public byte green;
        public byte red;
    }
    public class Parser
    {
        public static int STIM_PATTERN = 1;
        private static bool _initialized = false;
        private static bool _setCalib = true;
        public static double[,] SIM_CALIB = new double[,] { { 0.949936382062952 }, { 0.417846135079561 }, { 0.251397992497500 }, { 0.180310726383545 }, { 0.145712061201870 }, { 0.129536134288811 }, { 0.124275545909635 }, { 0.128420587659991 }, { 0.144578876887957 }, { 0.179447865485623 }, { 0.251397992497501 }, { 0.417201469138821 }, { 0.956902943893345 }, { 0.949936382062949 }, { 0.417201469138820 }, { 0.252228676813372 }, { 0.180582635398658 }, { 0.145712061201871 }, { 0.128420587659991 }, { 0.122670394480735 }, { 0.127456761107220 }, { 0.144578876887957 }, { 0.180310726383546 }, { 0.252228676813373 }, { 0.420449410501102 }, { 0.956902943893344 }, { 0.949936382062951 }, { 0.956902943893348 }, { 0.420449410501105 }, { 0.252228676813373 }, { 0.180310726383547 }, { 0.144578876887958 }, { 0.127456761107220 }, { 0.122670394480735 }, { 0.128420587659990 }, { 0.145712061201870 }, { 0.180582635398659 }, { 0.252228676813370 }, { 0.417201469138816 }, { 0.417846135079561 }, { 0.949936382062950 }, { 0.956902943893351 }, { 0.417201469138821 }, { 0.251397992497503 }, { 0.179447865485626 }, { 0.144578876887957 }, { 0.128420587659992 }, { 0.124275545909635 }, { 0.129536134288811 }, { 0.145712061201870 }, { 0.180310726383543 }, { 0.251397992497497 }, { 0.251397992497500 }, { 0.417201469138820 }, { 0.956902943893349 }, { 0.949936382062949 }, { 0.417846135079564 }, { 0.251397992497502 }, { 0.180310726383546 }, { 0.145712061201871 }, { 0.129536134288811 }, { 0.124275545909635 }, { 0.128420587659991 }, { 0.144578876887956 }, { 0.179447865485622 }, { 0.180310726383545 }, { 0.252228676813372 }, { 0.420449410501105 }, { 0.956902943893351 }, { 0.949936382062955 }, { 0.417201469138823 }, { 0.252228676813373 }, { 0.180582635398660 }, { 0.145712061201871 }, { 0.128420587659991 }, { 0.122670394480735 }, { 0.127456761107219 }, { 0.144578876887956 }, { 0.145712061201870 }, { 0.180582635398659 }, { 0.252228676813372 }, { 0.417201469138822 }, { 0.949936382062949 }, { 0.956902943893351 }, { 0.420449410501105 }, { 0.252228676813374 }, { 0.180310726383546 }, { 0.144578876887957 }, { 0.127456761107219 }, { 0.122670394480735 }, { 0.128420587659990 }, { 0.129536134288811 }, { 0.145712061201871 }, { 0.180310726383547 }, { 0.251397992497503 }, { 0.417846135079565 }, { 0.949936382062956 }, { 0.956902943893345 }, { 0.417201469138820 }, { 0.251397992497500 }, { 0.179447865485623 }, { 0.144578876887956 }, { 0.128420587659991 }, { 0.124275545909635 }, { 0.124275545909635 }, { 0.128420587659991 }, { 0.144578876887958 }, { 0.179447865485626 }, { 0.251397992497502 }, { 0.417201469138823 }, { 0.956902943893351 }, { 0.949936382062953 }, { 0.417846135079563 }, { 0.251397992497499 }, { 0.180310726383545 }, { 0.145712061201871 }, { 0.129536134288811 }, { 0.128420587659991 }, { 0.122670394480735 }, { 0.127456761107220 }, { 0.144578876887958 }, { 0.180310726383546 }, { 0.252228676813373 }, { 0.420449410501105 }, { 0.956902943893345 }, { 0.949936382062949 }, { 0.417201469138818 }, { 0.252228676813371 }, { 0.180582635398659 }, { 0.145712061201871 }, { 0.144578876887957 }, { 0.127456761107220 }, { 0.122670394480736 }, { 0.128420587659992 }, { 0.145712061201871 }, { 0.180582635398660 }, { 0.252228676813374 }, { 0.417201469138820 }, { 0.949936382062953 }, { 0.956902943893348 }, { 0.420449410501105 }, { 0.252228676813375 }, { 0.180310726383547 }, { 0.179447865485623 }, { 0.144578876887957 }, { 0.128420587659991 }, { 0.124275545909635 }, { 0.129536134288811 }, { 0.145712061201871 }, { 0.180310726383546 }, { 0.251397992497499 }, { 0.417846135079562 }, { 0.949936382062948 }, { 0.956902943893346 }, { 0.417201469138822 }, { 0.251397992497502 }, { 0.251397992497501 }, { 0.180310726383546 }, { 0.145712061201870 }, { 0.129536134288811 }, { 0.124275545909635 }, { 0.128420587659991 }, { 0.144578876887957 }, { 0.179447865485622 }, { 0.251397992497499 }, { 0.417201469138818 }, { 0.956902943893349 }, { 0.949936382062955 }, { 0.417846135079566 }, { 0.417201469138821 }, { 0.252228676813373 }, { 0.180582635398659 }, { 0.145712061201870 }, { 0.128420587659991 }, { 0.122670394480735 }, { 0.127456761107219 }, { 0.144578876887956 }, { 0.180310726383545 }, { 0.252228676813371 }, { 0.420449410501104 }, { 0.956902943893345 }, { 0.949936382062957 }, { 0.956902943893345 }, { 0.420449410501102 }, { 0.252228676813370 }, { 0.180310726383543 }, { 0.144578876887956 }, { 0.127456761107219 }, { 0.122670394480735 }, { 0.128420587659991 }, { 0.145712061201871 }, { 0.180582635398659 }, { 0.252228676813375 }, { 0.417201469138822 }, { 0.949936382062955 }, { 0.956902943893343 }, { 0.417201469138816 }, { 0.251397992497497 }, { 0.179447865485622 }, { 0.144578876887956 }, { 0.128420587659990 }, { 0.124275545909635 }, { 0.129536134288811 }, { 0.145712061201871 }, { 0.180310726383547 }, { 0.251397992497502 }, { 0.417846135079566 }, { 0.949936382062958 } };
        private static double[,] _diffBase = new double[,] { { 0.949936382062952 }, { 0.417846135079561 }, { 0.251397992497500 }, { 0.180310726383545 }, { 0.145712061201870 }, { 0.129536134288811 }, { 0.124275545909635 }, { 0.128420587659991 }, { 0.144578876887957 }, { 0.179447865485623 }, { 0.251397992497501 }, { 0.417201469138821 }, { 0.956902943893345 }, { 0.949936382062949 }, { 0.417201469138820 }, { 0.252228676813372 }, { 0.180582635398658 }, { 0.145712061201871 }, { 0.128420587659991 }, { 0.122670394480735 }, { 0.127456761107220 }, { 0.144578876887957 }, { 0.180310726383546 }, { 0.252228676813373 }, { 0.420449410501102 }, { 0.956902943893344 }, { 0.949936382062951 }, { 0.956902943893348 }, { 0.420449410501105 }, { 0.252228676813373 }, { 0.180310726383547 }, { 0.144578876887958 }, { 0.127456761107220 }, { 0.122670394480735 }, { 0.128420587659990 }, { 0.145712061201870 }, { 0.180582635398659 }, { 0.252228676813370 }, { 0.417201469138816 }, { 0.417846135079561 }, { 0.949936382062950 }, { 0.956902943893351 }, { 0.417201469138821 }, { 0.251397992497503 }, { 0.179447865485626 }, { 0.144578876887957 }, { 0.128420587659992 }, { 0.124275545909635 }, { 0.129536134288811 }, { 0.145712061201870 }, { 0.180310726383543 }, { 0.251397992497497 }, { 0.251397992497500 }, { 0.417201469138820 }, { 0.956902943893349 }, { 0.949936382062949 }, { 0.417846135079564 }, { 0.251397992497502 }, { 0.180310726383546 }, { 0.145712061201871 }, { 0.129536134288811 }, { 0.124275545909635 }, { 0.128420587659991 }, { 0.144578876887956 }, { 0.179447865485622 }, { 0.180310726383545 }, { 0.252228676813372 }, { 0.420449410501105 }, { 0.956902943893351 }, { 0.949936382062955 }, { 0.417201469138823 }, { 0.252228676813373 }, { 0.180582635398660 }, { 0.145712061201871 }, { 0.128420587659991 }, { 0.122670394480735 }, { 0.127456761107219 }, { 0.144578876887956 }, { 0.145712061201870 }, { 0.180582635398659 }, { 0.252228676813372 }, { 0.417201469138822 }, { 0.949936382062949 }, { 0.956902943893351 }, { 0.420449410501105 }, { 0.252228676813374 }, { 0.180310726383546 }, { 0.144578876887957 }, { 0.127456761107219 }, { 0.122670394480735 }, { 0.128420587659990 }, { 0.129536134288811 }, { 0.145712061201871 }, { 0.180310726383547 }, { 0.251397992497503 }, { 0.417846135079565 }, { 0.949936382062956 }, { 0.956902943893345 }, { 0.417201469138820 }, { 0.251397992497500 }, { 0.179447865485623 }, { 0.144578876887956 }, { 0.128420587659991 }, { 0.124275545909635 }, { 0.124275545909635 }, { 0.128420587659991 }, { 0.144578876887958 }, { 0.179447865485626 }, { 0.251397992497502 }, { 0.417201469138823 }, { 0.956902943893351 }, { 0.949936382062953 }, { 0.417846135079563 }, { 0.251397992497499 }, { 0.180310726383545 }, { 0.145712061201871 }, { 0.129536134288811 }, { 0.128420587659991 }, { 0.122670394480735 }, { 0.127456761107220 }, { 0.144578876887958 }, { 0.180310726383546 }, { 0.252228676813373 }, { 0.420449410501105 }, { 0.956902943893345 }, { 0.949936382062949 }, { 0.417201469138818 }, { 0.252228676813371 }, { 0.180582635398659 }, { 0.145712061201871 }, { 0.144578876887957 }, { 0.127456761107220 }, { 0.122670394480736 }, { 0.128420587659992 }, { 0.145712061201871 }, { 0.180582635398660 }, { 0.252228676813374 }, { 0.417201469138820 }, { 0.949936382062953 }, { 0.956902943893348 }, { 0.420449410501105 }, { 0.252228676813375 }, { 0.180310726383547 }, { 0.179447865485623 }, { 0.144578876887957 }, { 0.128420587659991 }, { 0.124275545909635 }, { 0.129536134288811 }, { 0.145712061201871 }, { 0.180310726383546 }, { 0.251397992497499 }, { 0.417846135079562 }, { 0.949936382062948 }, { 0.956902943893346 }, { 0.417201469138822 }, { 0.251397992497502 }, { 0.251397992497501 }, { 0.180310726383546 }, { 0.145712061201870 }, { 0.129536134288811 }, { 0.124275545909635 }, { 0.128420587659991 }, { 0.144578876887957 }, { 0.179447865485622 }, { 0.251397992497499 }, { 0.417201469138818 }, { 0.956902943893349 }, { 0.949936382062955 }, { 0.417846135079566 }, { 0.417201469138821 }, { 0.252228676813373 }, { 0.180582635398659 }, { 0.145712061201870 }, { 0.128420587659991 }, { 0.122670394480735 }, { 0.127456761107219 }, { 0.144578876887956 }, { 0.180310726383545 }, { 0.252228676813371 }, { 0.420449410501104 }, { 0.956902943893345 }, { 0.949936382062957 }, { 0.956902943893345 }, { 0.420449410501102 }, { 0.252228676813370 }, { 0.180310726383543 }, { 0.144578876887956 }, { 0.127456761107219 }, { 0.122670394480735 }, { 0.128420587659991 }, { 0.145712061201871 }, { 0.180582635398659 }, { 0.252228676813375 }, { 0.417201469138822 }, { 0.949936382062955 }, { 0.956902943893343 }, { 0.417201469138816 }, { 0.251397992497497 }, { 0.179447865485622 }, { 0.144578876887956 }, { 0.128420587659990 }, { 0.124275545909635 }, { 0.129536134288811 }, { 0.145712061201871 }, { 0.180310726383547 }, { 0.251397992497502 }, { 0.417846135079566 }, { 0.949936382062958 } };
        private static EngMATAccess acc = null;
        public static double[,] colormap = new double[,] { { 0.5000, 0.5000, 0.1500 }, { 0, 0, 0.2997 }, { 0, 0, 0.3086 }, { 0, 0, 0.3175 }, { 0, 0, 0.3265 }, { 0, 0, 0.3354 }, { 0, 0, 0.3443 }, { 0, 0, 0.3532 }, { 0, 0, 0.3621 }, { 0, 0, 0.3711 }, { 0, 0, 0.3800 }, { 0, 0, 0.3889 }, { 0, 0, 0.3978 }, { 0, 0, 0.4067 }, { 0, 0, 0.4157 }, { 0, 0, 0.4246 }, { 0, 0, 0.4335 }, { 0, 0, 0.4424 }, { 0, 0, 0.4513 }, { 0, 0, 0.4603 }, { 0, 0, 0.4692 }, { 0, 0, 0.4781 }, { 0, 0, 0.4870 }, { 0, 0, 0.4959 }, { 0, 0, 0.5049 }, { 0, 0, 0.5138 }, { 0, 0, 0.5227 }, { 0, 0, 0.5316 }, { 0, 0, 0.5405 }, { 0, 0, 0.5494 }, { 0, 0, 0.5584 }, { 0, 0, 0.5673 }, { 0, 0, 0.5762 }, { 0, 0, 0.5851 }, { 0, 0, 0.5940 }, { 0, 0, 0.6030 }, { 0, 0, 0.6119 }, { 0, 0, 0.6208 }, { 0, 0, 0.6297 }, { 0, 0, 0.6422 }, { 0, 0, 0.6690 }, { 0, 0, 0.6957 }, { 0, 0, 0.7225 }, { 0, 0, 0.7492 }, { 0, 0, 0.7760 }, { 0, 0, 0.8028 }, { 0, 0, 0.8295 }, { 0, 0, 0.8563 }, { 0, 0, 0.8830 }, { 0, 0, 0.9098 }, { 0, 0, 0.9366 }, { 0, 0, 0.9633 }, { 0, 0, 0.9901 }, { 0, 0.0178, 0.9990 }, { 0, 0.0446, 0.9990 }, { 0, 0.0714, 0.9990 }, { 0, 0.0981, 0.9990 }, { 0, 0.1249, 0.9990 }, { 0, 0.1516, 0.9990 }, { 0, 0.1784, 0.9990 }, { 0, 0.2052, 0.9990 }, { 0, 0.2319, 0.9990 }, { 0, 0.2587, 0.9990 }, { 0, 0.2854, 0.9990 }, { 0, 0.3122, 0.9990 }, { 0, 0.3389, 0.9990 }, { 0, 0.3657, 0.9990 }, { 0, 0.3925, 0.9990 }, { 0, 0.4192, 0.9990 }, { 0, 0.4460, 0.9990 }, { 0, 0.4727, 0.9990 }, { 0, 0.4995, 0.9990 }, { 0, 0.5263, 0.9990 }, { 0, 0.5530, 0.9990 }, { 0, 0.5798, 0.9990 }, { 0, 0.6065, 0.9990 }, { 0, 0.6333, 0.9990 }, { 0, 0.6601, 0.9990 }, { 0, 0.6868, 0.9990 }, { 0, 0.7136, 0.9990 }, { 0, 0.7403, 0.9990 }, { 0, 0.7671, 0.9990 }, { 0, 0.7938, 0.9990 }, { 0, 0.8206, 0.9990 }, { 0, 0.8474, 0.9990 }, { 0, 0.8741, 0.9990 }, { 0, 0.9009, 0.9990 }, { 0, 0.9276, 0.9990 }, { 0, 0.9544, 0.9990 }, { 0, 0.9812, 0.9990 }, { 0.0089, 0.9990, 0.9990 }, { 0.0357, 0.9990, 0.9990 }, { 0.0624, 0.9990, 0.9990 }, { 0.0892, 0.9990, 0.9990 }, { 0.1160, 0.9990, 0.9990 }, { 0.1427, 0.9990, 0.9990 }, { 0.1695, 0.9990, 0.9990 }, { 0.1962, 0.9990, 0.9990 }, { 0.2230, 0.9990, 0.9990 }, { 0.2498, 0.9990, 0.9990 }, { 0.2765, 0.9990, 0.9990 }, { 0.3033, 0.9990, 0.9990 }, { 0.3300, 0.9990, 0.9990 }, { 0.3568, 0.9990, 0.9990 }, { 0.3835, 0.9990, 0.9990 }, { 0.4103, 0.9990, 0.9990 }, { 0.4371, 0.9990, 0.9990 }, { 0.4638, 0.9990, 0.9990 }, { 0.4906, 0.9990, 0.9990 }, { 0.5173, 0.9990, 0.9990 }, { 0.5441, 0.9990, 0.9990 }, { 0.5709, 0.9990, 0.9990 }, { 0.5976, 0.9990, 0.9990 }, { 0.6244, 0.9990, 0.9990 }, { 0.6511, 0.9990, 0.9990 }, { 0.6779, 0.9990, 0.9990 }, { 0.7047, 0.9990, 0.9990 }, { 0.7314, 0.9990, 0.9990 }, { 0.7582, 0.9990, 0.9990 }, { 0.7849, 0.9990, 0.9990 }, { 0.8117, 0.9990, 0.9990 }, { 0.8384, 0.9990, 0.9990 }, { 0.8652, 0.9990, 0.9990 }, { 0.8920, 0.9990, 0.9990 }, { 0.9187, 0.9990, 0.9990 }, { 0.9455, 0.9990, 0.9990 }, { 0.9722, 0.9990, 0.9990 }, { 0.9990, 0.9990, 0.9990 }, { 0.9990, 0.9990, 0.9722 }, { 0.9990, 0.9990, 0.9455 }, { 0.9990, 0.9990, 0.9187 }, { 0.9990, 0.9990, 0.8920 }, { 0.9990, 0.9990, 0.8652 }, { 0.9990, 0.9990, 0.8384 }, { 0.9990, 0.9990, 0.8117 }, { 0.9990, 0.9990, 0.7849 }, { 0.9990, 0.9990, 0.7582 }, { 0.9990, 0.9990, 0.7314 }, { 0.9990, 0.9990, 0.7047 }, { 0.9990, 0.9990, 0.6779 }, { 0.9990, 0.9990, 0.6511 }, { 0.9990, 0.9990, 0.6244 }, { 0.9990, 0.9990, 0.5976 }, { 0.9990, 0.9990, 0.5709 }, { 0.9990, 0.9990, 0.5441 }, { 0.9990, 0.9990, 0.5173 }, { 0.9990, 0.9990, 0.4906 }, { 0.9990, 0.9990, 0.4638 }, { 0.9990, 0.9990, 0.4371 }, { 0.9990, 0.9990, 0.4103 }, { 0.9990, 0.9990, 0.3835 }, { 0.9990, 0.9990, 0.3568 }, { 0.9990, 0.9990, 0.3300 }, { 0.9990, 0.9990, 0.3033 }, { 0.9990, 0.9990, 0.2765 }, { 0.9990, 0.9990, 0.2497 }, { 0.9990, 0.9990, 0.2230 }, { 0.9990, 0.9990, 0.1962 }, { 0.9990, 0.9990, 0.1695 }, { 0.9990, 0.9990, 0.1427 }, { 0.9990, 0.9990, 0.1160 }, { 0.9990, 0.9990, 0.0892 }, { 0.9990, 0.9990, 0.0624 }, { 0.9990, 0.9990, 0.0357 }, { 0.9990, 0.9990, 0.0089 }, { 0.9990, 0.9812, 0 }, { 0.9990, 0.9544, 0 }, { 0.9990, 0.9276, 0 }, { 0.9990, 0.9009, 0 }, { 0.9990, 0.8741, 0 }, { 0.9990, 0.8474, 0 }, { 0.9990, 0.8206, 0 }, { 0.9990, 0.7938, 0 }, { 0.9990, 0.7671, 0 }, { 0.9990, 0.7403, 0 }, { 0.9990, 0.7136, 0 }, { 0.9990, 0.6868, 0 }, { 0.9990, 0.6601, 0 }, { 0.9990, 0.6333, 0 }, { 0.9990, 0.6065, 0 }, { 0.9990, 0.5798, 0 }, { 0.9990, 0.5530, 0 }, { 0.9990, 0.5263, 0 }, { 0.9990, 0.4995, 0 }, { 0.9990, 0.4727, 0 }, { 0.9990, 0.4460, 0 }, { 0.9990, 0.4192, 0 }, { 0.9990, 0.3925, 0 }, { 0.9990, 0.3657, 0 }, { 0.9990, 0.3389, 0 }, { 0.9990, 0.3122, 0 }, { 0.9990, 0.2854, 0 }, { 0.9990, 0.2587, 0 }, { 0.9990, 0.2319, 0 }, { 0.9990, 0.2052, 0 }, { 0.9990, 0.1784, 0 }, { 0.9990, 0.1516, 0 }, { 0.9990, 0.1249, 0 }, { 0.9990, 0.0981, 0 }, { 0.9990, 0.0714, 0 }, { 0.9990, 0.0446, 0 }, { 0.9990, 0.0178, 0 }, { 0.9901, 0, 0 }, { 0.9633, 0, 0 }, { 0.9366, 0, 0 }, { 0.9098, 0, 0 }, { 0.8830, 0, 0 }, { 0.8563, 0, 0 }, { 0.8295, 0, 0 }, { 0.8028, 0, 0 }, { 0.7760, 0, 0 }, { 0.7492, 0, 0 }, { 0.7225, 0, 0 }, { 0.6957, 0, 0 }, { 0.6690, 0, 0 }, { 0.6422, 0, 0 }, { 0.6297, 0, 0 }, { 0.6208, 0, 0 }, { 0.6119, 0, 0 }, { 0.6030, 0, 0 }, { 0.5940, 0, 0 }, { 0.5851, 0, 0 }, { 0.5762, 0, 0 }, { 0.5673, 0, 0 }, { 0.5584, 0, 0 }, { 0.5495, 0, 0 }, { 0.5405, 0, 0 }, { 0.5316, 0, 0 }, { 0.5227, 0, 0 }, { 0.5138, 0, 0 }, { 0.5049, 0, 0 }, { 0.4959, 0, 0 }, { 0.4870, 0, 0 }, { 0.4781, 0, 0 }, { 0.4692, 0, 0 }, { 0.4603, 0, 0 }, { 0.4513, 0, 0 }, { 0.4424, 0, 0 }, { 0.4335, 0, 0 }, { 0.4246, 0, 0 }, { 0.4157, 0, 0 }, { 0.4067, 0, 0 }, { 0.3978, 0, 0 }, { 0.3889, 0, 0 }, { 0.3800, 0, 0 }, { 0.3711, 0, 0 }, { 0.3621, 0, 0 }, { 0.3532, 0, 0 }, { 0.3443, 0, 0 }, { 0.3354, 0, 0 }, { 0.3265, 0, 0 }, { 0.3175, 0, 0 }, { 0.3086, 0, 0 }, { 0.2997, 0, 0 } };
        public const string EIDORS_DIRECTORY = "C:\\Program Files (x86)\\MATLAB\\eidors-v3.3";
        public const string START_SCRIPT = "cd('" + EIDORS_DIRECTORY + "');startup;";
        public const string DIFF_BASE_SCRIPT = "imb= mk_common_model('c2c',16);e= size(imb.fwd_model.elems,1);sigma= ones(e,1);img= eidors_obj('image','');img.elem_data= sigma;img.fwd_model= imb.fwd_model;vh = fwd_solve(img);";
        public const string DIFF_SOLVE_SCRIPT_ADJ = "imb=  mk_common_model('f2c',16);[imb.fwd_model.stimulation,imb.fwd_model.meas_select] = mk_stim_patterns(16,1,'{ad}', '{ad}', {'no_meas_current','rotate_meas'},.1);inv2d= eidors_obj('inv_model', 'EIT inverse');inv2d.reconst_type= 'difference';inv2d.jacobian_bkgnd.value= 1;inv2d.fwd_model= imb.fwd_model;inv2d.fwd_model.np_fwd_solve.perm_sym= '{y}';inv2d.parameters.term_tolerance= 1e-10;inv2d.hyperparameter.value = 1e-3;inv2d.solve='aa_inv_solve';inv2d.RtR_prior=   'laplace_image_prior';imgr= inv_solve( inv2d, vh, vi);imgr = show_slices(imgr)";
        public const string DIFF_SOLVE_SCRIPT_OPP = "imb=  mk_common_model('c2c',16);[imb.fwd_model.stimulation,imb.fwd_model.meas_select] = mk_stim_patterns(16,1,'{op}', '{ad}', {'no_meas_current','rotate_meas'},.1);inv2d= eidors_obj('inv_model', 'EIT inverse');inv2d.reconst_type= 'difference';inv2d.jacobian_bkgnd.value= 1;inv2d.fwd_model= imb.fwd_model;inv2d.fwd_model.np_fwd_solve.perm_sym= '{y}';inv2d.parameters.term_tolerance= 1e-4;inv2d.hyperparameter.value = 1e-3;inv2d.solve='aa_inv_solve';inv2d.RtR_prior=   'laplace_image_prior';imgr= inv_solve( inv2d, vh, vi);imgr = show_slices(imgr)";

        public static double[,] DiffBase
        {
            set
            {
                _diffBase = value;
                _setCalib = true;
            }
            get
            {
                return _diffBase;
            }
        }
        public static int[] ParseToDataset(byte[] data, int numsamples)
        {
            int[] toRet = new int[numsamples];
            int dataind = 0;
            for (int x = 0; x < toRet.Length; x++)
            {
                //if serial data is packed as sequential 12 bit values, we need to desquash
                
                    toRet[x] = (data[dataind++] << 8) + data[dataind++];
        
            }
            return toRet;
        }
        public static Bitmap CreateImage(byte[] RawData)
        {
            int[] parsedData = ParseToDataset(RawData, (STIM_PATTERN==1?208:192));
            double[,] finalData = new double[parsedData.Length,1];
            for (int x = 0; x < parsedData.Length; x++)
            {
                finalData[x,0] = parsedData[x] / (Math.Pow(2, 12) - 1.0);
            }
            if (!_initialized)
            {
                acc = new EngMATAccess(65596);
                acc.SetVisible(false);
                acc.Evaluate(START_SCRIPT);
                _initialized = true;
            }
            acc.SetMatrix("vi", finalData);
            if (DiffBase != null && _setCalib)
            {
                acc.Evaluate("vh=5");
                acc.SetMatrix("vh", DiffBase);
                _setCalib = false;

            }
            else if (_setCalib)
            {
                acc.Evaluate("vh=5");
                _setCalib = false;
            }
            acc.Evaluate(STIM_PATTERN == 1?DIFF_SOLVE_SCRIPT_ADJ:DIFF_SOLVE_SCRIPT_OPP);
            //Absolute EIT
            /*acc.Evaluate("calc_colours('ref_level','auto');");
            acc.Evaluate("load tutorial151_model.mat");
            acc.Evaluate("imdl.reconst_type= 'static';");
            acc.Evaluate("imdl.solve=@tutorial151_nonlinearGN;");
            acc.Evaluate("imdl.parameters.term_tolerance= 1e-5;");
            acc.Evaluate("imdl.parameters.max_iterations= 10;");
            acc.Evaluate("imdl.tutorial151_nonlinearGN.init_backgnd= .02;");

            acc.Evaluate("imdl.hyperparameter.value= 1e-2;");
            acc.Evaluate("imgr= inv_solve(imdl, vi);");
            acc.Evaluate("imgr = imgr.elem_data");*/
            //read out imgr as image
            
            Matrix imgr = acc.GetMatrix("imgr");
            if (imgr == null)
                throw new Exception("Could not retrieve matrix from matlab, check that EIDORS directory is " + EIDORS_DIRECTORY + "\nMatlab response is " + acc.LastResult);
            UnsafeBitmap bmp = new UnsafeBitmap(imgr.Rows*8 , imgr.Cols*8);
            bmp.LockBitmap();
            for (int x = 0; x<imgr.Rows; x++)
            {
                for (int y = 0; y < imgr.Cols; y++)
                {
                    byte color = (byte)(imgr[x, y]);
                    bmp.SetSquare((imgr.Rows-1-x)*8, y*8, (byte)(colormap[color - 1, 0] * 255), (byte)(colormap[color - 1, 1] * 255), (byte)(colormap[color - 1, 2] * 255));
                }
            }
            bmp.UnlockBitmap();
            Bitmap toret = bmp.Bitmap;
            return toret;
        }

    }
}
